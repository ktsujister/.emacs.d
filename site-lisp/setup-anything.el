;; anything
;; (require 'anything)
(require 'anything-startup)
;; (require 'anything-config)
;; (setq anything-c-locate-command "locate -l 20 -e -b -i -r %s")
;; (setq anything-sources (list anything-c-source-buffers
;;                              anything-c-source-bookmarks
;;                              anything-c-source-files-in-current-dir
;;                              anything-c-source-recentf
;;                              anything-c-source-file-name-history
;;                              ;; anything-c-source-locate
;;                              anything-c-source-man-pages))
(setq anything-enable-shortcuts 'prefix)
(define-key anything-map (kbd "@") 'anything-select-with-prefix-shortcut)
;; (define-key anything-map "\C-\M-p" 'anything-previous-source)
;; (define-key anything-map "\C-\M-n" 'anything-next-source)

(defun my-anything ()
  "Anything command for you.

It is automatically generated by `anything-migrate-sources'."
  (interactive)
  (anything-other-buffer
   '(((name . "Buffers")
      (candidates . anything-c-buffer-list)
      (type . buffer))
     ((name . "Bookmarks")
      (init lambda nil (require (quote bookmark)))
      (candidates . bookmark-all-names)
      (type . bookmark))
     ((name . "Files from Current Directory")
      (candidates lambda nil (with-anything-current-buffer (directory-files (anything-c-current-directory))))
      (type . file))
     ((name . "Recentf")
      (init lambda nil (require (quote recentf)) (or recentf-mode (recentf-mode 1)))
      (candidates . recentf-list)
      (type . file))
     ((name . "File Name History")
      (candidates . file-name-history)
      (match anything-c-match-on-basename)
      (type . file))
     ((name . "Manual Pages")
      (candidates lambda nil (if anything-c-man-pages anything-c-man-pages (setq anything-c-man-pages (ignore-errors (require (quote woman)) (woman-file-name "") (sort (mapcar (quote car) woman-topic-all-completions) (quote string-lessp))))))
      (action ("Show with Woman" . anything-c-man-default-action))
      (action-transformer lambda (actions candidate) (if (eq system-type (quote darwin)) (quote (("Show with Man" . man))) actions))
      (requires-pattern . 2)))
   "*my-anything*"))

(provide 'setup-anything)
